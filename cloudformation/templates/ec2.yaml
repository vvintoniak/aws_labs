AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy EC2 Instance without SSH Key"

Parameters:
  Environment:
    Type: String
    Default: "test"
    Description: "Deployment environment (e.g., dev, prod)"

  InstanceType:
    Type: String
    Default: "t2.micro"
    Description: "EC2 instance type"
  SSHDefaultKey:
    Type: String
    Description: "SSH Key"

Resources:
  SSHKey:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: "root_key"
      PublicKeyMaterial: !Ref SSHDefaultKey
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH access from the internet"
      VpcId: !ImportValue
        Fn::Sub: "${Environment}-VPC-ID"  # Ensure you have exported VPC-ID in another stack
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from any IP (Modify this for better security)
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-SSH-SG"
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EC2SecretsManagerRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SecretsManagerAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !ImportValue RDSSecretARN  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "EC2InstanceProfile-${AWS::StackName}"
      Roles:
        - !Ref EC2IAMRole

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00354acb6e3508fd0
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          SubnetId: !Select 
            - 0
            - !Split 
              - ","
              - !ImportValue 
                  Fn::Sub: "${Environment}-PrivateSubnets"      
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-EC2"

      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash
              echo "Retrieving RDS credentials from AWS Secrets Manager..."
              SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${RDSSecretARN} --query SecretString --output text --region us-east-1)
              DB_USERNAME=$(echo $SECRET_JSON | jq -r .username)
              DB_PASSWORD=$(echo $SECRET_JSON | jq -r .password)
              echo "export DB_USERNAME=${DB_USERNAME}" >> /etc/environment
              echo "export DB_PASSWORD=${DB_PASSWORD}" >> /etc/environment
              echo "Credentials loaded."
            - { RDSSecretARN: !ImportValue RDSSecretARN }

Outputs:
  EC2InstanceId:
    Description: "Instance ID of EC2"
    Value: !Ref MyEC2Instance

  PublicIP:
    Description: "Public IP of EC2"
    Value: !GetAtt MyEC2Instance.PublicIp
