name: CloudFormation Multi-Stack Deployment

on:
  push:
    branches:
      - main
    paths:
      - "cloudformation/**"
  pull_request:
    branches:
      - main
    paths:
      - "cloudformation/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment (test, dev, prod, etc.)"
        required: true
        default: "test"

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Read repository content

jobs:
  deploy_vpc:
    name: Deploy VPC Stack
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'test' }}
    env:
      ACTIONS_STEP_DEBUG: 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCRole2

      - name: Validate VPC Template
        run: aws cloudformation validate-template \
          --template-body file://cloudformation/templates/vpc.yaml

      - name: Create Change Set for VPC
        id: create_vpc_changeset
        run: |
          ENV_NAME="${{ github.event.inputs.environment }}"
          STACK_NAME="my-vpc-stack-$ENV_NAME"
          CHANGESET_NAME="cf-changeset-${{ github.run_id }}"

          # Optionally pick parameters by environment. E.g.:
          #   paramsFile="cloudformation/parameters/${ENV_NAME}-params.json"
          paramsFile="cloudformation/parameters/test-params.json"

          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
                          --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_EXISTS")

          if [[ "$STACK_STATUS" == "NOT_EXISTS" ]]; then
            echo "Stack does not exist. Creating a new stack..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body file://cloudformation/templates/vpc.yaml \
              --parameters file://$paramsFile \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
            echo "STACK_CREATED=true" >> $GITHUB_ENV
          else
            echo "Stack exists. Checking for changes..."
            CHANGESET_OUTPUT=$(aws cloudformation create-change-set \
              --stack-name $STACK_NAME \
              --template-body file://cloudformation/templates/vpc.yaml \
              --parameters file://$paramsFile \
              --change-set-name $CHANGESET_NAME \
              --capabilities CAPABILITY_NAMED_IAM \
              --change-set-type UPDATE 2>&1)

            if echo "$CHANGESET_OUTPUT" | grep -q "The submitted information didn't contain changes"; then
              echo "No changes detected. Skipping change set execution."
              echo "NO_CHANGES=true" >> $GITHUB_ENV
            else
              echo "CHANGESET_NAME=$CHANGESET_NAME" >> $GITHUB_ENV
              echo "Changes detected:"
              echo "$CHANGESET_OUTPUT"
            fi
          fi

      - name: Execute Change Set for VPC
        if: env.STACK_CREATED != 'true' && env.NO_CHANGES != 'true'
        run: |
          aws cloudformation execute-change-set \
            --stack-name "my-vpc-stack-${{ github.event.inputs.environment }}" \
            --change-set-name $CHANGESET_NAME

  deploy_ec2:
    name: Deploy EC2 Stack
    runs-on: ubuntu-latest
    needs: deploy_vpc
    environment: ${{ github.event.inputs.environment || 'test' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCRole

      - name: Validate EC2 Template
        run: aws cloudformation validate-template \
          --template-body file://cloudformation/templates/ec2.yaml

      - name: Create Change Set for EC2
        id: create_ec2_changeset
        run: |
          ENV_NAME="${{ github.event.inputs.environment }}"
          STACK_NAME="my-ec2-stack-$ENV_NAME"
          CHANGESET_NAME="cf-changeset-${{ github.run_id }}"
          paramsFile="cloudformation/parameters/test-params.json"

          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
                          --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_EXISTS")

          if [[ "$STACK_STATUS" == "NOT_EXISTS" ]]; then
            echo "Stack does not exist. Creating a new stack..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body file://cloudformation/templates/ec2.yaml \
              --parameters file://$paramsFile \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
            echo "STACK_CREATED=true" >> $GITHUB_ENV
          else
            echo "Stack exists. Checking for changes..."
            CHANGESET_OUTPUT=$(aws cloudformation create-change-set \
              --stack-name $STACK_NAME \
              --template-body file://cloudformation/templates/ec2.yaml \
              --parameters file://$paramsFile \
              --change-set-name $CHANGESET_NAME \
              --capabilities CAPABILITY_NAMED_IAM \
              --change-set-type UPDATE 2>&1)

            if echo "$CHANGESET_OUTPUT" | grep -q "The submitted information didn't contain changes"; then
              echo "No changes detected. Skipping change set execution."
              echo "NO_CHANGES=true" >> $GITHUB_ENV
            else
              echo "CHANGESET_NAME=$CHANGESET_NAME" >> $GITHUB_ENV
              echo "Changes detected:"
              echo "$CHANGESET_OUTPUT"
            fi
          fi

      - name: Execute Change Set for EC2
        if: env.STACK_CREATED != 'true' && env.NO_CHANGES != 'true'
        run: |
          aws cloudformation execute-change-set \
            --stack-name "my-ec2-stack-${{ github.event.inputs.environment }}" \
            --change-set-name $CHANGESET_NAME
